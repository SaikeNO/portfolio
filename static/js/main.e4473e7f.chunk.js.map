{"version":3,"sources":["styles/colors.js","layouts/Header/BurgerNavi/style.js","layouts/Header/BurgerNavi/BurgerNaviItem.js","layouts/Header/BurgerNavi/BurgerNavi.js","layouts/Header/style.js","layouts/Header/Header.js","App.js","reportWebVitals.js","index.js"],"names":["colors","StyledNav","styled","motion","nav","StyledUl","ul","StyledLink","NavLink","BurgerNaviItem","name","path","exact","index","li","initial","y","opacity","animate","exit","transition","duration","delay","whileHover","color","to","dataNav","BurgerNavigation","menu","map","item","x","HeaderElement","header","ButtonElement","button","LinkElement","BurgerSpanElement","span","Header","useState","isOpened","setIsOpened","onClick","prevIsOpened","BurgerNavi","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8NAAaA,EACJ,UADIA,EAGH,UAHGA,EAIJ,UCCIC,EAAYC,YAAOC,IAAOC,IAAdF,CAAH,iIAMAF,GAGTK,EAAWH,IAAOI,GAAV,gMASRC,EAAaL,YAAOC,YAAOK,KAAdN,CAAH,0CACZF,G,OCQIS,EA3BQ,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,MAC3C,OACE,cAAC,IAAOC,GAAR,CACEC,QAAS,CAAEC,EAAG,GAAIC,QAAS,GAC3BC,QAAS,CAAEF,EAAG,EAAGC,QAAS,GAC1BE,KAAM,CACJC,WAAY,CAAEC,SAAU,GAAKC,MAAuB,IAAfT,EAAQ,MAC7CG,GAAI,GACJC,QAAS,GAEXG,WAAY,CAAEC,SAAU,GAAKC,MAAe,GAART,GARtC,SAUE,cAACN,EAAD,CACEgB,WAAY,CACVC,MAAOxB,GAEToB,WAAY,CACVC,SAAU,IAEZI,GAAId,EACJC,MAAOA,EART,SAUGF,OCtBHgB,EAAU,CACd,CAAEhB,KAAM,OAAQC,KAAM,IAAKC,OAAO,GAClC,CAAEF,KAAM,QAASC,KAAM,UACvB,CAAED,KAAM,QAASC,KAAM,UACvB,CAAED,KAAM,UAAWC,KAAM,aA2BZgB,EAxBU,WACvB,IAAMC,EAAOF,EAAQG,KAAI,SAACC,EAAMjB,GAAP,OACvB,cAAC,EAAD,CAEEH,KAAMoB,EAAKpB,KACXC,KAAMmB,EAAKnB,KACXC,MAAOkB,EAAKlB,MACZC,MAAOA,EAAQ,GAJVA,MAQT,OACE,cAACZ,EAAD,CAEEc,QAAS,CAAEgB,EAAG,SACdb,QAAS,CAAEa,EAAG,GACdZ,KAAM,CAAEY,EAAG,QAASX,WAAY,CAAEE,MAAO,EAAGD,SAAU,KACtDD,WAAY,CAAEC,SAAU,IAL1B,SAOE,cAAChB,EAAD,UAAWuB,KANP,eCpBGI,EAAgB9B,IAAO+B,OAAV,iPAcbC,EAAgBhC,IAAOiC,OAAV,2JASbC,EAAclC,YAAOM,IAAPN,CAAH,0CACbF,GAGEqC,EAAoBnC,IAAOoC,KAAV,+HAKRtC,GCCPuC,EAxBA,WAAO,IAAD,EACaC,oBAAS,GADtB,mBACZC,EADY,KACFC,EADE,KAKnB,OACE,eAACV,EAAD,WACE,8BACE,cAACI,EAAD,CAAaxB,OAAK,EAACa,GAAI,IAAvB,0BAIF,eAACS,EAAD,CAAeS,QATO,kBAAMD,GAAY,SAACE,GAAD,OAAmBA,MAS3D,UACE,cAACP,EAAD,IACA,cAACA,EAAD,IACA,cAACA,EAAD,OAEF,cAAC,IAAD,UACGI,GAAY,cAACI,EAAD,CAAYJ,SAAUA,U,MCZ5BK,MAXf,WACE,OACE,eAAC,IAAD,WACE,cAAC,EAAD,IACA,+BCDSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e4473e7f.chunk.js","sourcesContent":["export const colors = {\r\n  black: \"#1F1F1F\",\r\n  gray: \"#646464\",\r\n  orange: \"#FFD100\",\r\n  white: \"#FFFFFF\",\r\n};\r\n","import { NavLink } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport { motion } from \"framer-motion\";\r\nimport { colors } from \"../../../styles/colors\";\r\n\r\nexport const StyledNav = styled(motion.nav)`\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  height: 100%;\r\n  width: 100%;\r\n  background-color: ${colors.white};\r\n`;\r\n\r\nexport const StyledUl = styled.ul`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  height: 100%;\r\n  font-size: 60px;\r\n  text-transform: uppercase;\r\n`;\r\nexport const StyledLink = styled(motion(NavLink))`\r\n  color: ${colors.black};\r\n`;\r\n","import { NavLink } from \"react-router-dom\";\r\nimport { motion } from \"framer-motion\";\r\nimport { StyledLink } from \"./style\";\r\nimport { colors } from \"../../../styles/colors\";\r\n\r\nconst BurgerNaviItem = ({ name, path, exact, index }) => {\r\n  return (\r\n    <motion.li\r\n      initial={{ y: 50, opacity: 0 }}\r\n      animate={{ y: 0, opacity: 1 }}\r\n      exit={{\r\n        transition: { duration: 0.5, delay: (index - 1.5) * 0.2 },\r\n        y: -50,\r\n        opacity: 0,\r\n      }}\r\n      transition={{ duration: 0.5, delay: index * 0.2 }}\r\n    >\r\n      <StyledLink\r\n        whileHover={{\r\n          color: colors.orange,\r\n        }}\r\n        transition={{\r\n          duration: 0.2,\r\n        }}\r\n        to={path}\r\n        exact={exact}\r\n      >\r\n        {name}\r\n      </StyledLink>\r\n    </motion.li>\r\n  );\r\n};\r\nexport default BurgerNaviItem;\r\n","import React from \"react\";\r\nimport MenuItem from \"./BurgerNaviItem\";\r\n\r\nimport { StyledNav, StyledUl } from \"./style\";\r\n\r\nconst dataNav = [\r\n  { name: \"home\", path: \"/\", exact: true },\r\n  { name: \"about\", path: \"/about\" },\r\n  { name: \"works\", path: \"/works\" },\r\n  { name: \"contact\", path: \"/contact\" },\r\n];\r\n\r\nconst BurgerNavigation = () => {\r\n  const menu = dataNav.map((item, index) => (\r\n    <MenuItem\r\n      key={index}\r\n      name={item.name}\r\n      path={item.path}\r\n      exact={item.exact}\r\n      index={index + 1}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <StyledNav\r\n      key=\"burger nav\"\r\n      initial={{ x: \"-100%\" }}\r\n      animate={{ x: 0 }}\r\n      exit={{ x: \"-100%\", transition: { delay: 1, duration: 0.5 } }}\r\n      transition={{ duration: 0.8 }}\r\n    >\r\n      <StyledUl>{menu}</StyledUl>\r\n    </StyledNav>\r\n  );\r\n};\r\n\r\nexport default BurgerNavigation;\r\n","import styled from \"styled-components\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nimport { colors } from \"../../styles/colors\";\r\n\r\nexport const HeaderElement = styled.header`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  height: 100px;\r\n  padding: 0 50px;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n`;\r\n\r\nexport const ButtonElement = styled.button`\r\n  position: relative;\r\n  width: 40px;\r\n  background-color: transparent;\r\n  border: none;\r\n  cursor: pointer;\r\n  z-index: 999;\r\n`;\r\n\r\nexport const LinkElement = styled(NavLink)`\r\n  color: ${colors.white};\r\n`;\r\n\r\nexport const BurgerSpanElement = styled.span`\r\n  display: block;\r\n  height: 3px;\r\n  width: 100%;\r\n  margin-bottom: 8px;\r\n  background-color: ${colors.orange};\r\n`;\r\n","import React, { useState } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nimport BurgerNavi from \"./BurgerNavi/BurgerNavi\";\r\n\r\nimport { AnimatePresence } from \"framer-motion\";\r\n\r\nimport {\r\n  HeaderElement,\r\n  ButtonElement,\r\n  LinkElement,\r\n  BurgerSpanElement,\r\n} from \"./style\";\r\n\r\nconst Header = () => {\r\n  const [isOpened, setIsOpened] = useState(false);\r\n\r\n  const handleToggleClick = () => setIsOpened((prevIsOpened) => !prevIsOpened);\r\n\r\n  return (\r\n    <HeaderElement>\r\n      <nav>\r\n        <LinkElement exact to={\"/\"}>\r\n          lengiewicz\r\n        </LinkElement>\r\n      </nav>\r\n      <ButtonElement onClick={handleToggleClick}>\r\n        <BurgerSpanElement />\r\n        <BurgerSpanElement />\r\n        <BurgerSpanElement />\r\n      </ButtonElement>\r\n      <AnimatePresence>\r\n        {isOpened && <BurgerNavi isOpened={isOpened} />}\r\n      </AnimatePresence>\r\n    </HeaderElement>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nimport Header from \"./layouts/Header/Header\";\nimport Page from \"./layouts/Page/Page\";\nimport Navigation from \"./layouts/Navigation/Navigation\";\n\nimport \"./styles/App.css\";\n\nfunction App() {\n  return (\n    <Router>\n      <Header />\n      <header></header>\n      {/* <Page /> */}\n      {/* <Navigation /> */}\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}